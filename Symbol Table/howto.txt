0.
You just have to run the file type the following command in linux/unix shell "./0" and it should work
1.
There are multiple ways to do this and I realized this after doing the hard way but to recreate my approach you need to do the following:
* Run gdb with file 1 by typing "gdb ./1".
* Type "start" to start the execution and then type "disas main" and see that it calls a function password. 
* You can set a breakpoint at password by typing "b password" and then type "c" to continue execution.
* Then type "disas password" to see that to generate the random number it uses rand function (a common c++ function to generate random numbers), so all we need to do it get the return value of this function.
* Now just step through each line of the program by typing "ni" and  wait for return value of rand function  and see rax register whatever the value is immediattely after the return of rand is the random number.
* Remember this number and enter this when the program prompts for it and the secret will show itself.
2.
In this part the hint suggested that he code or the secret was the CURLcode of curl_easy_perform and so you need to:
* Run ltrace on 2 by typing "ltrace ./2" and find the return value of curl_easy_perform.
* It was 0 and the CURLcode corresponding to that I searched on google and found an answer CURLE_OK
3.
This part was really easy. When you run ./3 it gives and error that a certain file is missing so we need to do the following steps:
*  Use strace to trace the systems call by typing "strace ./3" and you find that it is trying to open a file called "iamspecial".
* Create that file using "touch iamspecial" or any other method.
* Run ./3 again this time it says looking for some permissions.
* See the system calls again and you see it wants X_OK permissions which a bit of googling will tell that is the execute permission.
* Set the permission using "chmod +x iamspecial".
* Run ./3 again and it should spill the secret.
4.
When we run ./4 it shows an error saying lib361 is missing so we need to create the shared library.
* First, Create a file called "361.c" or any other name doesn't matter.
* Then make it into a shared library by compiling it into and independant file using -fpic flag using the following command "".
* Then make it shared library using the -shared flag using the following command.
* Next, set the environment variable LD_LIBRARY_PATH to the current working directory.
* Shared library is created. Now run the file again by typing "./4" and it should show an error saying symbol missing called secretoperation.
* This implies we have to create this function (hint in Lab 3) so edit the "361.c" file and add a line "void secretopertion(){}".
* After recompiling and running it will give an assertion error which suggests that it expected the result to be 10. This implies the return type must be int and value should be 10. I made these changes and hardcoded the return value as 10.
* After recompiling I found another assertion error which asserted the value to be 4. Now I ran the ltrace by using "ltrace ./4".
* After observing the calls to secretopertion I found that result seemed to be first two arguments passed to this function summed and add 1 to it. So if arguments were 3 and 6 result was 1 + 3 + 6. I made the changes and added two int arguments/parameters to the function and changed the return value to their sum + 1.
* After running the program again the secret showed itself
